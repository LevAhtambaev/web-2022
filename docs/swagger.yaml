basePath: /
definitions:
  ds.Car:
    properties:
      bodyType:
        example: Седан
        type: string
      color:
        example: Синий
        type: string
      description:
        example: Продаю машину!
        type: string
      engineType:
        example: V8
        type: string
      engineVolume:
        example: 2
        type: number
      gearbox:
        example: Механика
        type: string
      image:
        example: https://res.cloudinary.com/dl0tawm7w/image/upload/v1667667247/CarsImages/chrome_YoXkkSgQS3_zsbaep.png
        type: string
      mileage:
        example: 27000
        type: integer
      name:
        example: Subaru WRX I Рестайлинг
        type: string
      power:
        example: 268
        type: integer
      salePrice:
        example: 3500000
        type: integer
      typeOfDrive:
        example: Полный
        type: string
      wheel:
        example: Левый руль
        type: string
      year:
        example: 2017
        type: integer
    type: object
  ds.CarPrice:
    properties:
      salePrice:
        example: 1200000
        type: integer
    type: object
  models.ModelCarCreated:
    properties:
      created:
        description: success
        type: boolean
    type: object
  models.ModelCarDeleted:
    properties:
      deleted:
        type: boolean
    type: object
  models.ModelCarPrice:
    properties:
      price:
        type: integer
    type: object
  models.ModelError:
    properties:
      description:
        description: description
        type: string
      error:
        description: error
        type: string
      type:
        description: type
        type: string
    type: object
  models.ModelPriceChanged:
    properties:
      changed:
        type: boolean
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: hopply@mail.ru
    name: API Support
    url: https://vk.com/hopply_time
  description: Showroom for japanese domestic market (JDM)
  license:
    name: AS IS (NO WARRANTY)
  title: CarShowroom
  version: "1.0"
paths:
  /cars:
    get:
      description: Get a list of all cars
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ds.Car'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ModelError'
      summary: Get all records
      tags:
      - Info
    post:
      consumes:
      - application/json
      description: Adding a new car to database
      parameters:
      - description: Машина
        in: body
        name: Car
        required: true
        schema:
          $ref: '#/definitions/ds.Car'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ModelCarCreated'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ModelError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ModelError'
      summary: Add a new car
      tags:
      - Add
  /cars/{UUID}:
    delete:
      description: Delete a car via its uuid
      parameters:
      - description: UUID машины
        in: path
        name: UUID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModelCarDeleted'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ModelError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ModelError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ModelError'
      summary: Delete a car
      tags:
      - Change
    get:
      description: Get a price via uuid of a car
      parameters:
      - description: UUID машины
        in: path
        name: UUID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModelCarPrice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ModelError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ModelError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ModelError'
      summary: Get price for a car
      tags:
      - Info
    put:
      consumes:
      - application/json
      description: Change a price for a car via its uuid
      parameters:
      - description: UUID машины
        in: path
        name: UUID
        required: true
        type: string
      - description: Новая цена
        in: body
        name: SalePrice
        required: true
        schema:
          $ref: '#/definitions/ds.CarPrice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ModelPriceChanged'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ModelError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ModelError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ModelError'
      summary: Change car price
      tags:
      - Change
schemes:
- http
- https
swagger: "2.0"
